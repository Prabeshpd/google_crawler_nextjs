generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DB_CONNECTION_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(100)
  email         String         @db.VarChar(50)
  emailVerified DateTime?
  password      String?        @db.VarChar(100)
  image         String?        
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @updatedAt @map("updated_at")
  SearchResult  SearchResult[]
  Account       Account[]

  @@unique([email])
  @@index([email])
  @@map("users")
}

model SearchResult {
  id              String        @id @default(uuid()) @db.Uuid
  keyword         String        @db.VarChar(100)
  html            String?       @db.Text
  status          Int?          @db.SmallInt
  adWordsTopCount Int?          @db.Integer @map("ad_words_top_count")
  totalLinksCount Int?          @db.Integer @map("total_links_count")
  nonAdLinksCount Int?          @db.Integer @map("non_ad_links_count")
  adWordsCount    Int?          @db.Integer @map("ad_words_count")
  adWordTopUrls   String[]      @map("ad_word_top_urls")
  nonAdUrls       String[]      @map("nod_ad_urls")
  searchEngine    SearchEngine? @map("search_engine")
  user            User          @relation(fields: [userId], references: [id])
  userId          Int           @db.Integer
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map("search_results")
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String             @map("provider_account_id")
  refresh_token      String?  @db.Text 
  access_token       String?  @db.Text  
  expires_at         Int?              
  token_type         String?            
  scope              String?
  id_token           String?  @db.Text  
  sessionState       String?            @map("session_token")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum SearchEngine {
  google
  bing
}
